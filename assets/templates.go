// Code generated by go-bindata. (@generated) DO NOT EDIT.
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xdb\x6e\xe3\x36\x10\x7d\x0f\x90\x7f\x60\xd8\x62\xb3\x0b\xac\xc4\x38\x97\xb6\x68\x24\x01\x69\x9a\xb6\x0f\x09\x36\xa8\xf3\x03\x14\x39\x96\xe8\xf0\xa2\x25\x29\x27\x46\x90\x7f\x5f\x50\x37\xdb\xb2\x9d\xcd\xee\x93\x4d\xf2\x70\x2e\x67\x38\x67\x94\x1c\x71\xc3\xfc\xb2\x02\x54\x7a\x25\xb3\xc3\x83\x24\xfc\x22\x49\x75\x91\x62\xd0\x38\x3b\x3c\x08\x7b\x40\x79\x76\x78\x80\x10\x42\x89\x02\x4f\x11\x2b\xa9\x75\xe0\x53\x5c\xfb\x59\xf4\x07\xde\x38\xd3\x54\x41\x8a\x17\x02\x9e\x2a\x63\x3d\x46\xcc\x68\x0f\xda\xa7\xf8\x49\x70\x5f\xa6\x1c\x16\x82\x41\xd4\x2c\x3e\x23\xa1\x85\x17\x54\x46\x8e\x51\x09\xe9\xe4\x33\x72\xa5\x15\xfa\x31\xf2\x26\x9a\x09\x9f\x6a\xb3\xcb\x36\x07\xc7\xac\xa8\xbc\x30\x7a\xcd\xfc\x2e\x24\xad\x7d\x69\xec\x0e\x50\x07\xf5\xc2\x4b\xc8\xa6\xa2\xd0\x42\xa3\x07\x50\x95\xa4\x1e\xd0\xcc\x58\xf4\x97\x31\xde\x79\x4b\xab\x84\xb4\xa0\x40\x44\x73\x47\x0a\xfd\x88\x2c\xc8\x14\x33\xaa\x8d\x16\x8c\x4a\x8c\x4a\x0b\xb3\x14\x97\xde\x57\xee\x4f\x42\x0a\xf0\x79\x7f\x3f\x66\x46\x11\x6e\x98\x23\xe7\xf1\x09\x81\x67\xaa\x2a\x09\x8e\x38\x51\xe8\x48\x68\x82\x57\x86\x8f\xa2\x68\xe5\x16\x31\x63\x01\x5d\x4f\xa7\x28\x8a\xb2\x2d\xcf\xce\x2f\x25\xb8\x12\xc0\x8f\x5d\x2b\xfa\xcc\xb8\x8e\x07\xf7\x61\x11\x22\x18\x36\xc8\x79\x7c\x11\x9f\x12\xe6\xdc\x6a\x2f\x56\x42\xc7\xcc\xb9\x51\x30\xd7\xb5\xf3\x46\xa1\xd6\x59\xc3\x8a\x2f\x85\x43\xbe\xe7\x69\x14\xd9\x4f\x73\xe0\x1a\xfe\x9b\x00\xb6\xd2\x5b\x45\xd4\xd6\x1c\x39\xcb\x56\x4e\xe8\x9c\x3e\xc7\x85\x31\x85\x04\x5a\x09\xd7\xf8\x09\x7b\x44\x8a\xdc\x91\xf9\xd7\x1a\xec\x92\x9c\xc5\x17\xf1\xa4\x5b\x34\x99\xce\x1d\xce\x12\xd2\xda\xcb\xde\xb0\xce\xb8\x9e\xbb\x98\x49\x53\xf3\x99\xa4\x16\x46\xe6\x2b\x53\x55\x60\xe3\xb9\x23\x93\x78\xf2\x5b\x7c\x42\x6a\xc5\xfb\xcd\x1f\x71\xf3\xde\x92\xcd\xc7\x15\x1b\x39\x48\x48\xd7\xa7\x87\x07\x49\x6e\xf8\x12\x31\x49\x9d\x4b\xb1\x87\x67\x1f\x31\xd0\x1e\xec\xe8\xf9\x87\x22\x3f\x94\x80\xee\x0c\xa7\x72\xad\x9c\x5c\x2c\xfa\xcb\xaa\x39\x9a\x51\x0e\x18\x09\x9e\x62\xb5\x6c\xc0\xbd\xa1\x9d\xf0\x88\x0b\x2a\x4d\xb1\x8e\xd9\x8d\xeb\xda\x72\x55\xe4\x0d\x78\x88\xae\x8d\xec\x3f\xa0\x1c\xec\x2a\xc0\xb7\xad\x96\x0d\x7a\xec\x7d\xc0\x97\xe7\x9b\xf0\xa6\xbd\x71\x76\x07\xce\xd1\x02\x12\x52\x9e\xef\xbb\x99\xd7\xde\x1b\x8d\x82\x5c\xa6\xb8\x5d\xe0\xde\x16\x93\xc6\x01\x46\x9c\x7a\x1a\x71\xe1\x94\x18\x1c\xe0\xec\x83\x17\x0a\xdc\x65\x42\xda\x3b\xbb\x92\x20\x5c\x2c\xbe\xc7\x42\x53\xd3\x77\x72\x10\xb0\xfb\x18\xb8\xaa\x7d\x09\x41\xb7\x82\x80\xa2\x7f\xa8\x90\xc0\x8f\x7e\x32\xa6\x99\x31\xfe\xfd\x95\x69\xd1\x7b\x2b\xf3\x16\xbf\xb9\xd7\x28\xf7\x3a\xe2\x54\x17\x60\xf7\x10\x7d\x1d\x8a\xf0\xc3\x34\xf7\xbb\xbb\xd6\x9b\x37\x5a\x55\xbc\xba\xbd\x45\x77\x5f\xfe\xbe\xba\x45\x77\x37\xd3\xe9\xd5\xbf\x37\xab\xf4\x5f\x5e\xc4\x0c\xc5\xdd\x53\x7a\x7d\xed\xda\x3d\xfb\xf5\xe3\xf1\x2f\x5d\xe3\x1c\x7f\x8a\x9b\x60\x3f\x1e\xbb\xd2\x3c\x1d\x7f\xba\x44\x43\x07\xbf\xbc\x80\xe6\xaf\xaf\x83\xb3\x99\xb1\xaa\x4f\x3f\xfc\x8f\x5a\x9d\xc4\x48\x81\x2f\x0d\x4f\xf1\xfd\x97\xe9\x03\x46\x94\x85\x3a\xa6\x98\x6c\xf4\xa4\x50\xc5\xc0\x7d\x1e\x9d\xe3\x4d\xc9\xd9\x2f\xce\xd4\x39\xf0\x8e\xe4\x96\x6a\xbe\x92\x9b\xc8\x19\x29\x78\xec\x16\x05\x46\x54\x86\x39\x8a\xda\x69\x8e\x7f\x3f\xc5\x9b\x6c\x96\x20\x8a\xd2\x37\x07\xeb\xf1\x94\x93\x3e\x9c\xf2\x0c\xa9\x3c\x3a\x43\x33\xa3\x7d\xf4\xd4\xa0\x23\x6d\xac\x0a\x05\xbc\x97\x40\x1d\x20\x69\x0a\xa1\x91\xd0\x09\x29\x27\xeb\x46\x24\xcd\x21\xbc\x39\x9b\x62\xa1\xab\xda\xdf\x28\x2a\xe4\xf0\x44\x9c\x8d\x8c\x96\x4b\x9c\x35\xdb\x88\x72\x6e\xc1\xb9\x84\x34\xb7\x36\xb8\x09\x77\xbb\x67\x06\xad\x89\x20\x6d\xeb\x26\xdb\xcf\x87\x1d\x4e\x9a\x42\x04\xdd\xb2\x46\x62\x54\x49\xca\xa0\x34\x92\x83\x4d\xf1\x86\xdb\x30\xc9\xbe\xd6\xc2\x02\xdf\xa4\x87\xd6\xde\xcc\x0c\xab\xdd\x5b\x79\xdd\x53\xe7\x9e\x8c\xe5\xdb\xa9\xf5\x27\xdf\xc9\xaa\x1a\x0c\x0c\x89\xad\x6c\xae\xe5\xb6\xe5\xe8\x8d\xf4\x06\xec\x66\x42\x7d\x9a\x7b\x06\x02\x2b\x81\x3d\xe6\xe6\xb9\xa9\xf9\xd6\x44\x18\x27\xb1\x33\x99\xde\x04\x46\x0b\x2a\x6b\x48\xb1\x05\x05\x2a\x07\x1b\x29\xc0\x19\xfa\xbf\x5b\x21\x05\xe3\xbe\xde\xe2\x68\xdc\xe9\x9d\xe2\x8c\x34\x46\x16\xcd\x4f\x65\x85\xa2\x76\xd9\xfc\xcf\xa5\x61\x8f\xb8\x0b\xc8\xd5\xb9\x12\x1e\x67\xb7\xc3\x33\xdd\x52\x9c\xa4\x1a\xba\xcf\x47\x17\xed\x83\x6f\xe6\xb0\xaa\x3d\x70\x9c\x7d\x60\xa6\x5a\x5e\xa2\xd3\x93\xd3\x93\x84\x54\x83\xd8\x04\xfa\x9b\x49\x1e\xf4\xbb\x9d\xe4\xa4\xfb\x30\xff\x16\x00\x00\xff\xff\x72\x5d\x06\xc5\xaa\x0b\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 2986, mode: os.FileMode(438), modTime: time.Unix(1605425996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x69\x73\xdb\xb6\xd6\xfe\x9e\x99\xfc\x07\x94\x79\xa7\xb2\xe7\x35\xc9\x78\xeb\xe2\x50\xec\xb8\xb1\x93\xba\x59\xea\xc6\xee\xbb\xdc\x2f\x1d\x88\x38\x22\x61\x83\x00\x2f\x00\x4a\x56\x5d\xfd\xf7\x3b\x00\x49\x71\xd1\x6a\x5f\xc7\x75\x7b\xeb\x0f\x11\x97\xb3\xe1\xc1\xc1\xe1\x03\xf2\x24\xf8\x82\x88\x48\x4f\x32\x40\x89\x4e\x59\xf8\xfc\x59\x60\x7e\x11\xc3\x3c\xee\x3b\xc0\x9d\xf0\xf9\x33\x73\x0d\x30\x09\x9f\x3f\x43\x08\xa1\x20\x05\x8d\x51\x94\x60\xa9\x40\xf7\x9d\x5c\x0f\xdd\x6f\x9c\xd6\x3d\x8e\x53\xe8\x3b\x23\x0a\xe3\x4c\x48\xed\xa0\x48\x70\x0d\x5c\xf7\x9d\x31\x25\x3a\xe9\x13\x18\xd1\x08\x5c\x7b\xb2\x83\x28\xa7\x9a\x62\xe6\xaa\x08\x33\xe8\xef\xee\x20\x95\x48\xca\xaf\x5d\x2d\xdc\x21\xd5\x7d\x2e\x16\xd9\x26\xa0\x22\x49\x33\x4d\x05\x6f\x98\x5f\x24\x89\x73\x9d\x08\xd9\x11\x2a\xc5\x34\xd5\x0c\xc2\x73\x49\x23\xca\x63\x04\x37\x38\xcd\x18\xa0\xa1\x90\xe8\x7b\x21\xb4\xd2\x12\x67\x81\x5f\x08\xcd\x74\x18\xe5\xd7\x48\x02\xeb\x3b\x11\xe6\x82\xd3\x08\x33\x07\x25\x12\x86\x7d\x27\xd1\x3a\x53\x47\xbe\x1f\x83\x1e\x54\xfa\x5e\x24\x52\x9f\x88\x48\xf9\x07\xde\x4b\xbf\x74\xa1\xfc\xac\xf0\xe9\x37\x82\xf9\xc2\x75\x6b\xb7\x28\x12\x12\xd0\xeb\x8b\x0b\xe4\xba\xe1\x9c\x67\xa5\x27\x0c\x54\x02\xa0\x37\x77\x4d\xa8\xd2\x7e\xa4\x94\x5f\xdf\x4f\x29\xf7\x22\xa5\x8a\x18\x5a\x71\xbc\xce\x95\x16\x29\x2a\xfc\x58\x40\x74\x42\x15\xd2\x90\x66\x0c\x6b\xe8\x06\x75\xef\xe1\x97\xbf\x36\x8a\xb9\xa1\xd5\xd0\x14\x73\x8d\x94\x8c\x6a\x2f\xf8\x0a\xdf\x78\xb1\x10\x31\x03\x9c\x51\x65\x1d\x99\x6b\x3e\xa3\x03\xe5\x5f\xfd\x33\x07\x39\xf1\xf7\xbd\x43\x6f\xb7\x3c\xb1\xc3\xbd\x52\x4e\x18\xf8\x85\xbd\x70\x85\xf5\x88\xf0\x2b\xe5\x45\x4c\xe4\x64\xc8\xb0\x84\x8e\xf9\x4c\x64\x19\x48\xef\x4a\xf9\xbb\xde\xee\x57\xde\x4b\x3f\x4f\x49\x75\xf1\x2e\x6e\x52\x7c\x13\x11\xee\xcd\xe0\x32\x27\xc6\xd3\xec\x82\x7f\xe0\x1d\x7a\x7b\xfe\x55\x77\xda\x3a\x0e\x02\xbf\x5c\x9f\xcf\x9f\x05\x03\x41\x26\x95\x4f\x42\x47\x28\x62\x58\xa9\xbe\x43\xdc\x21\x83\x1b\x64\xfe\x71\x23\xc1\xf2\x94\x17\xc7\x29\x71\xa5\x18\x23\xcc\x68\xcc\x5d\xaa\x21\x55\x6e\x04\x5c\x83\x44\x99\xbb\x8f\x32\x2b\x70\x80\xd2\x81\xbb\x8f\x06\xb1\x3b\x4e\xa8\x06\x34\x10\x92\x80\x74\x07\x42\x9b\x2c\x19\x88\x1b\x57\x25\x98\x88\x71\xb5\xfe\xac\xef\xe4\xb0\x72\x9d\x4e\xdc\x97\x28\x95\xc6\x12\xce\xb5\x40\x43\xc1\xb5\x3b\x06\x1a\x27\xda\xe5\x42\xa6\x66\x05\x51\xd2\x77\xec\x4a\x73\xc2\xff\x05\x16\x89\x14\xd0\xed\xad\x77\x0e\x32\xa5\x4a\x51\xc1\xa7\xd3\xad\xdb\x5b\xef\x23\x4e\x61\x3a\xdd\x0e\xfc\xe4\xb0\xe9\x8a\xe3\x51\xc3\xd7\x1e\x4a\x27\xc6\x57\xe5\x73\xbf\x19\x96\x95\x1f\xe4\x5a\x0b\x8e\x4c\xd1\xeb\x3b\xc5\x89\x53\x19\x18\x68\x8e\x06\x9a\xbb\x22\xd7\x8c\x72\x70\x55\x1e\x45\xa0\x14\xca\xdc\x3d\x07\x11\xac\xb1\xab\x45\x1c\x33\xe8\x3b\xa9\x20\x26\xf2\xe2\x1a\x96\xb1\x29\x86\x2f\xec\xc5\x63\x42\x9c\xf0\x98\x90\xb6\x5b\xf3\xf7\x01\xd2\x01\xc8\xc0\x2f\x9c\x76\xe3\xc2\xcb\x82\x20\x98\xc7\x76\x46\xf6\xaa\x05\xef\x33\x11\x8b\x5c\x3b\xe1\x7b\xfb\x1b\xf8\xb8\x09\x88\xcf\xf1\xa8\xca\x01\x9f\xd0\x51\xbb\xca\x5c\x26\x80\x3e\x98\x38\xd1\x31\x21\x65\x48\x8d\x25\xdd\x48\x1a\x3b\x1a\x34\xc4\x04\x8a\x19\xaa\x47\xd7\x70\xd6\x95\x77\x09\xc5\x4c\xc4\x73\xa8\xcf\xc9\x95\x25\xb9\x5e\xe8\x2d\x71\x13\x69\x11\xe5\x0f\x80\x49\x33\xc2\xd5\x56\x13\x2b\xdd\xf5\x5e\xa7\xe5\x41\x5b\xbc\x48\xba\x7a\x74\xbf\x56\xfa\x35\x36\x81\x9f\x1c\x2c\x33\xb7\x2a\x95\x22\x26\x14\x94\x09\x42\xa8\x32\x99\x5c\x65\x4d\xf8\xa5\xa6\x29\xa8\x57\x4b\x32\x61\x7e\xe2\x96\x40\x63\x16\xfb\x12\x60\x86\x42\xa6\x28\x05\x9d\x08\xd2\x77\xce\x7f\xba\xb8\x74\x10\x8e\xcc\x03\xb3\xef\xf8\xb8\x3d\x85\xab\x01\x35\x3e\x96\x49\x77\x35\x8c\x53\x37\x96\x22\xcf\x56\x69\x58\x2d\x86\x07\xc0\xcc\xb3\xa5\x02\x1e\x13\xf2\x2b\x25\x4e\x78\x76\x72\x14\xf8\xf6\xee\x3a\x13\x94\x67\xb9\x2e\xb1\xd7\x70\xa3\x9d\x56\x18\x26\xbd\xa4\x60\xcd\xb9\x2d\x5d\x94\xd4\xa0\xed\x76\xc5\x00\xcb\x99\x78\x0c\x00\x86\x54\x2a\x6d\xc2\x73\xc2\x37\xd5\xe1\x67\x85\xa3\x76\x38\x87\x4a\x23\x96\xa7\x01\x0e\xc3\x55\x3c\xef\xf1\x23\x40\x33\x73\x37\x87\x4c\x1d\xc8\xd3\x00\x46\x0a\xf3\xe0\xfc\x24\xd8\xc6\x80\x28\x60\x10\xe9\x4d\x50\xb0\xb6\xe7\x10\x28\x3c\xae\x76\x62\x1d\x09\x4b\xd2\xc3\x5f\x94\xa9\xa3\xe5\xc9\xe6\x6a\xc7\x24\xa5\xfc\x1e\x7a\x27\x30\x02\x26\xb2\x7b\xf9\xbc\x04\xa5\x37\x56\x0c\xfc\x02\xc9\x85\x85\xba\x16\x7a\xbc\x54\x80\x14\x53\xe6\x84\xa7\xe6\xe7\x3e\xab\xa3\xd0\xdf\x24\x31\x4a\xc9\x6e\x66\x94\x01\x3c\x0d\x34\x32\xac\xd4\x58\x48\xe2\x84\xe7\xe5\xd1\x7d\x30\x99\x59\xd9\x04\x96\x99\xf0\xfa\x8c\xeb\x42\x57\x47\x7b\x3f\xf4\x56\xde\xab\x49\xc3\x50\x08\xbd\x8c\x4f\xa1\x85\x14\xa0\xd0\x58\x19\x56\x8b\x08\xa9\x7c\x90\x52\x3d\xc7\xa9\x4b\x2e\xed\x84\x17\x78\x04\x2b\xa8\xcf\x62\xa3\x4b\x88\x7a\xc1\x8d\x97\xd0\xac\xd7\x86\x82\xad\xf1\xb4\x0c\xb5\xc0\x37\xd3\xdc\x65\xb1\x1d\xe1\xe6\xf9\x4a\xaa\x7d\x4a\xa8\xbe\x3b\xd7\x36\x5a\xff\x09\x64\xbb\x81\xce\x5f\x8f\x6d\x43\x67\x12\x57\x43\xfa\x58\x74\xdb\x44\xf5\xb9\xf9\x76\xe5\xa3\x55\xe9\x66\x8e\xff\xf8\x47\x84\x0d\xe5\x51\x29\x77\xc7\xe3\xdd\x9e\x11\xdd\x70\x9f\x08\x80\x8f\x48\xcb\xdb\xfe\xe6\xc1\x79\x4a\xc4\xdc\x06\xf4\xb9\x98\x79\x6d\x7c\x1e\x84\xbf\xb9\x79\xa9\xf4\x94\xb8\xb9\x9d\x99\xc7\x21\xe7\x0d\x57\xf3\xc9\xf1\x64\xe8\xb9\x8d\xe6\x91\xf9\x79\xdb\xe7\x3d\x8a\xef\xdf\x0c\x7d\x95\xd1\x3f\x37\x43\x3f\x01\x06\xad\x6f\x5b\xeb\xc8\x79\xa1\xf0\x97\xa3\xe7\xe1\x07\x50\x0a\xc7\xf0\xe7\x24\xe2\x77\xe2\xd3\x41\x86\x26\x22\x47\x63\xcc\x75\x35\xfd\x67\x27\x47\x61\xe0\x67\xcb\x15\xea\x6a\x42\xac\xc6\xaf\x69\x01\x97\x13\x42\x9a\xe9\xc9\x2a\xdd\x10\x7d\x57\xdc\xbe\xe7\xb0\x57\x95\x85\xbb\x96\x84\x3b\xad\x5c\xc1\x23\x46\xa3\xeb\xbe\x53\x0c\x99\x6c\x6d\xaf\x28\x9e\x0b\x27\xbe\x40\x77\xdd\x3a\xdf\x24\xa6\x4c\xd2\x14\xcb\xc9\xb2\x72\x82\x79\x04\xec\xce\xf9\x75\x87\xa2\xd1\xc0\xd9\x2c\x5a\x4c\x79\x1b\xe4\x20\xd9\x0b\x8b\x9d\xac\x42\x97\x80\xd3\xc0\x4f\xf6\x9a\xb7\xb3\xd0\x94\x1c\x4f\xe3\x01\x03\x57\x69\x49\x33\x20\x85\x41\x84\x09\x51\xe8\x37\x18\x48\x5c\xde\x50\x48\x0b\x84\x91\x95\x3d\x6a\x67\x56\x60\x2f\x56\x91\x14\x27\x2d\x9b\x73\x35\x47\x37\x7a\x38\xda\x37\xe4\xb2\xf9\xd0\x49\x78\x76\x12\xf8\x3a\x59\x21\x30\xdb\x33\xad\x91\xab\xf6\x06\x6b\xc4\x0c\x55\x5e\x23\x62\xe9\xd3\x1a\x99\x63\xbb\xf9\x2e\x85\x16\x65\xc1\xdc\xa0\x8d\xec\x3c\x40\x81\x6e\x7c\x4f\x6f\xfe\xdd\xde\x4a\xb3\x38\x90\x57\xce\xf5\x74\x7a\x37\x64\x49\x78\x7b\xeb\x9d\x9d\x4c\xa7\x81\xaf\x17\xcd\x4a\x43\xca\x22\x5c\x7c\xfa\x5e\x2f\x6c\x60\xde\x54\xd6\x60\xbd\x89\x9c\x05\x7c\xad\xe0\x46\xab\x77\x8c\x25\xa7\x3c\x5e\xc3\xbd\x66\xf5\xa6\x20\xf0\xa7\x84\xea\xad\x5e\x89\x57\x6f\xa7\xd7\xc6\xa4\xb8\x50\x8f\xbb\x38\x2f\xc6\x56\x1c\x97\xf1\x17\x27\x15\xd1\x9c\x4e\x7b\xdb\xaf\x9c\xf0\xf4\xe4\xec\x72\x03\xa2\xf3\xfb\x03\x71\xa0\xce\xc8\x8a\xb2\x58\x8f\xcd\x44\x74\x72\xfa\xfe\xf4\xf2\x74\x2d\x25\x5a\x38\x17\x0b\xf2\x1a\xd9\x64\x05\x4e\xba\x19\x1a\xf8\xdd\xdc\x0e\x7c\x5b\x41\x9a\x57\xca\x47\x4e\x39\x9a\x4c\xbb\x07\x65\x77\xc5\x21\xca\x74\xf1\x5b\x76\x83\x68\x31\xb7\x09\x68\xd6\x4a\xd9\x6e\x0f\x59\x24\x12\x09\xe6\xee\xee\x21\xf3\x93\x2e\xff\x3e\x4d\xd3\x78\xf6\x9c\x1b\xb8\x7b\x4e\xbb\xa3\x66\x79\xf3\x11\x56\x0a\xb4\xf2\x07\x12\x73\x52\x77\xd3\xb8\x4a\x30\x4a\x3c\x35\x8a\x1d\x84\x99\xee\x3b\x2b\x32\xb3\xe8\x5e\x73\xf6\x0e\x1c\x94\xd8\xee\x15\x7b\xbc\x2c\x4e\x95\x62\xc6\xea\xee\x9b\x01\x13\xd1\x75\xd1\x47\xa3\xe1\x46\xbb\x69\xae\x4d\x8d\xfe\x32\x12\xd9\xe4\x15\xda\x7b\xb9\xfb\xb5\xbb\xf7\x72\xf7\x9b\xc0\xb7\x7a\x2b\x1e\x5c\xeb\x10\xfc\x6a\x1d\x80\xc9\x61\xf8\x06\xb0\xce\x25\xa8\x4e\x23\x4d\x4b\x2c\x9f\x05\xcf\xa8\xd2\x6e\xce\x6d\x6b\x16\x29\xa2\xb7\x41\xae\xdc\x6d\x30\x1a\xd6\xfd\x2c\x8d\x11\x97\xfd\x2b\x2f\x9c\xf0\xb5\x10\x0c\x29\x9d\x0f\x87\x81\x8f\xc3\xc0\x67\xf4\xdf\xb3\xf7\x09\x73\x22\x52\x34\x2c\xc6\xf6\x30\x36\xcd\x03\xfc\x61\x2d\x5e\x98\x01\xdb\x96\x3a\x52\xbd\x07\x51\x0f\x63\xf9\x98\x0b\x9d\x80\x44\x82\x3f\x50\xa8\xa6\xa4\x22\x43\xd8\xd7\x98\x0b\xfc\xfc\x73\x27\xec\x27\x50\x22\x97\xd1\x1f\x9c\xb1\x55\x14\x0f\x94\xaf\xa5\x35\x54\xb0\xa2\x87\x4c\x01\xf9\xa0\x81\xbe\xa1\x1c\xb3\x4d\x6d\x3e\x42\x32\x1c\x0f\x6c\xc7\xdb\x1f\x98\x08\x05\xaf\x7f\x90\x35\x26\x22\x6c\x98\xea\x03\xd5\x80\x73\x49\x47\x38\x9a\x3c\x54\xf1\x93\xe9\xba\xb8\xee\x30\xdd\xf3\x7b\xac\x82\x5c\xcc\x6d\xb3\x1a\x6f\x67\x3a\x0d\xd1\x3f\xe2\x11\xbe\xb0\x4d\xaf\x85\x4c\xff\xce\x7f\x8d\xd7\x3b\xc6\xfe\x39\xc3\x11\x10\x84\x35\xd2\x09\x20\xe0\x04\x89\xa1\x3d\x24\x22\xca\x53\xe0\x1a\x29\x61\xcf\x33\x1c\x83\x42\x4c\x60\x82\x86\x58\xb5\x76\xe1\x8b\x1b\x88\x05\x01\xaf\x6c\x3c\x36\x34\xa4\x38\x74\xf7\xbd\x3d\x6f\xd7\x53\x8c\xa6\x55\x1b\x6f\x8d\x07\xe5\x1a\x62\x49\xf5\xa4\xef\xa8\x04\xef\x7f\x73\xe0\xbe\xfb\x71\x5f\xec\x9d\xbc\xd3\x67\xd7\xa3\xff\x3f\x7b\xb7\xff\xcb\xe9\xc7\xdf\xd2\x0f\x5f\xbf\x7b\x7d\xfd\x49\xfa\xf2\xf4\x5b\xff\xe7\x2c\xfe\x0a\x1f\xff\xe3\xed\x8f\xe3\x37\x27\x1f\xfe\xe7\xe3\xb1\xff\x36\x7b\xfb\xe6\xcd\xb7\xfb\xc9\xff\x65\x6f\x0f\xdf\x5d\x7f\x6c\x18\x8f\xa4\x50\x4a\x48\x1a\x53\xde\x77\x30\x17\x7c\x92\x8a\x7c\x69\x97\x72\x38\xa6\x9c\x88\xb1\x77\xf5\xb3\x89\x1a\xfd\xfe\xfb\x0c\x0f\x6f\x2c\xa9\x21\xac\x0b\x07\xbd\x96\x7c\x5d\x29\x7f\x04\x9c\x08\x59\xe1\xd1\x40\xa2\xb7\xbd\x49\xc7\xf4\x1d\x5c\xdc\xa3\x1f\x7b\x4d\xfb\xfc\xba\x36\xec\x87\x88\x3a\x11\x8c\xac\x8d\xba\xb1\x8a\x7e\x28\xe4\x31\x21\x97\x09\xa4\xb0\xd5\xd3\x49\x9e\x0e\x7a\x3b\xe8\xb6\xbd\xfa\x06\xf1\x11\xea\xbd\x38\x3c\x3c\xfc\xf6\x30\xea\xed\xb4\xef\x0d\xed\x3d\x88\x00\x60\xd8\xbd\x67\x2a\xc3\x11\xea\x5d\x1a\xab\x1c\x53\xd6\xab\x6f\x4f\xb7\x5f\x55\x4b\xb7\xd1\x89\x5e\xee\x29\x6c\x53\x7a\xf9\x1f\x4a\x5a\x41\x0f\x73\x6e\xf7\xe6\xa8\xb1\xb7\xa3\x64\x07\xcd\xbe\x6b\xee\xa0\xea\x2b\xde\x0e\x92\x82\xc1\x0e\xb2\xdf\x2c\x76\x50\xf5\xf2\x7d\xbb\x39\xb6\xff\xda\xea\xbd\x98\xb5\x4a\xa0\x17\xad\x4f\xcc\xbd\x6d\x6f\x84\xd9\x16\x25\x55\xa0\xab\x15\x66\x11\x94\x7a\xb3\xf3\xcd\xd4\xab\xa8\x4b\xed\xea\x74\x33\x65\x33\xd0\x52\xd1\x1c\x6e\xa6\x64\x71\x29\xb5\xec\xf1\x66\x6a\x15\x8e\xa5\xe6\x0c\xd6\x65\xca\xbd\x6d\xcf\x1e\x6f\xf5\x54\x22\xc6\xbd\x4a\x6e\x5a\x55\xea\xce\x8c\x96\x7b\x5a\xda\x9e\xa7\x59\x01\x89\x41\x9f\x32\x30\x87\xdf\x4f\xce\xc8\xd6\xe2\x77\xa9\xdb\x1e\xe5\x1c\xe4\x0f\x97\x1f\xde\xa3\x3e\xa2\x64\x51\x68\x85\x9f\x8d\x83\x9b\xbd\xba\x6c\x45\x55\xb8\xa5\x04\xf5\xef\x1f\x61\x23\xb8\x48\x70\xa5\x51\x2e\x19\xea\x23\xc7\x2f\x54\xbe\xa3\xa4\xef\xa0\xff\xae\x7d\xd5\xe2\x0c\xb4\x7d\x8d\x89\xfa\xdd\xe5\x4a\xc9\xd1\x22\x85\x69\x5b\x77\x08\x3a\x4a\x4e\x16\x1a\x28\x7a\x51\x8e\x50\xef\xfc\xa7\x8b\xcb\xee\xa2\x36\x6b\xf4\xc8\x7a\xee\xdc\x28\x3e\x18\xa8\x23\xc4\x61\x5c\x7e\x6b\x50\x5b\xdb\x0b\xfd\x5b\xdf\x5b\xb9\x64\x3b\x75\x18\xdb\x6d\x6b\x9e\x4e\x80\x6f\xcd\x66\xa0\x0d\x7d\xf5\x87\x23\x4d\x47\xb0\xd5\xcc\x3e\x54\x15\x97\x36\xb0\x82\x81\xc7\x44\x6c\x7c\x6e\x2f\x9b\xe5\xca\x5a\xd3\x53\xf9\x30\x63\x25\xd5\xf2\x0c\xc1\xb1\xf3\x93\x62\xca\x9d\x66\xc2\xcc\x0a\xd9\xbf\x02\x00\x00\xff\xff\x0a\x2e\x4e\xc4\x15\x37\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 14101, mode: os.FileMode(438), modTime: time.Unix(1605464057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/login.html": templatesLoginHtml,
	"templates/main.html":  templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"main.html":  &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
